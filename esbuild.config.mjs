import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

import fs from "node:fs";
import url from "node:url";

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the github repository of this plugin
*/
`;

let envPlugin = {
	name: 'import.meta.url',
	setup(build) {
		build.onLoad({ filter: /\.(js|jsx|ts|tsx)$/, namespace: 'file' }, async (args) => {
			const source = await fs.promises.readFile(args.path, 'utf8')
			const transformedCode = source.replace(
				/import\.meta\.url/g,
				JSON.stringify(url.pathToFileURL(args.path))
			);
			return {
				contents: transformedCode,
				loader: args.path.endsWith('.tsx') || args.path.endsWith('.ts') ? 'ts' : 'js',
			}
		});
	}
}

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2022",
	logLevel: "info",
	minify: prod ? true : false,
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	platform: "node",
	plugins: [envPlugin],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
